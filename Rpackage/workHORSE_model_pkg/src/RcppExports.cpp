// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// my_dBCPEo
NumericVector my_dBCPEo(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& log_, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_dBCPEo(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dBCPEo(x, mu, sigma, nu, tau, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pBCPEo
NumericVector my_pBCPEo(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_pBCPEo(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pBCPEo(q, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBCPEo
NumericVector my_qBCPEo(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qBCPEo(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBCPEo(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_dBCT
NumericVector my_dBCT(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& log_, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_dBCT(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dBCT(x, mu, sigma, nu, tau, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pBCT
NumericVector my_pBCT(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_pBCT(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pBCT(q, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBCT
NumericVector my_qBCT(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qBCT(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBCT(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_dBNB
NumericVector my_dBNB(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_dBNB(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dBNB(x, mu, sigma, nu, log, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pBNB
NumericVector my_pBNB(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_pBNB(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pBNB(q, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBNB
IntegerVector my_qBNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qBNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBNB(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qZIBNB
IntegerVector my_qZIBNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qZIBNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qZIBNB(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qZABNB
IntegerVector my_qZABNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qZABNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qZABNB(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_dDEL
NumericVector my_dDEL(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log_, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_dDEL(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dDEL(x, mu, sigma, nu, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pDEL
NumericVector my_pDEL(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_pDEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pDEL(q, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qDEL
IntegerVector my_qDEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qDEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qDEL(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_get_C
NumericVector my_get_C(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma);
RcppExport SEXP _workHORSEmisc_my_get_C(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(my_get_C(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// my_dDPO
NumericVector my_dDPO(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const bool& log_, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_dDPO(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dDPO(x, mu, sigma, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pDPO
NumericVector my_pDPO(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _workHORSEmisc_my_pDPO(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pDPO(q, mu, sigma, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// my_qDPO
IntegerVector my_qDPO(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p, const int& max_value, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qDPO(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP max_valueSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_value(max_valueSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qDPO(p, mu, sigma, lower_tail, log_p, max_value, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// run_impactncd_simulation
List run_impactncd_simulation(const List& simulationStructureList, const DataFrame& frame, const List& input_list);
RcppExport SEXP _workHORSEmisc_run_impactncd_simulation(SEXP simulationStructureListSEXP, SEXP frameSEXP, SEXP input_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type simulationStructureList(simulationStructureListSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< const List& >::type input_list(input_listSEXP);
    rcpp_result_gen = Rcpp::wrap(run_impactncd_simulation(simulationStructureList, frame, input_list));
    return rcpp_result_gen;
END_RCPP
}
// my_qMN4
IntegerVector my_qMN4(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qMN4(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qMN4(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_dSICHEL
NumericVector my_dSICHEL(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log_, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_dSICHEL(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dSICHEL(x, mu, sigma, nu, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pSICHEL
NumericVector my_pSICHEL(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_pSICHEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pSICHEL(q, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qSICHEL
IntegerVector my_qSICHEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qSICHEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qSICHEL(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qZISICHEL
IntegerVector my_qZISICHEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_qZISICHEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qZISICHEL(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pZISICHEL
NumericVector my_pZISICHEL(NumericVector q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _workHORSEmisc_my_pZISICHEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pZISICHEL(q, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// carry_forward
IntegerVector carry_forward(const IntegerVector& x, const LogicalVector& pid, const int& y);
RcppExport SEXP _workHORSEmisc_carry_forward(SEXP xSEXP, SEXP pidSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(carry_forward(x, pid, y));
    return rcpp_result_gen;
END_RCPP
}
// carry_backward
IntegerVector carry_backward(const IntegerVector& x, const LogicalVector& pid);
RcppExport SEXP _workHORSEmisc_carry_backward(SEXP xSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_backward(x, pid));
    return rcpp_result_gen;
END_RCPP
}
// mk_new_simulant_markers
LogicalVector mk_new_simulant_markers(const IntegerVector& pid);
RcppExport SEXP _workHORSEmisc_mk_new_simulant_markers(SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_new_simulant_markers(pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_longdead
LogicalVector identify_longdead(const IntegerVector& x, const LogicalVector& pid);
RcppExport SEXP _workHORSEmisc_identify_longdead(SEXP xSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_longdead(x, pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_invitees
IntegerVector identify_invitees(const IntegerVector& elig, const IntegerVector& prev_inv, const NumericVector& prb, const IntegerVector& freq, const LogicalVector& pid);
RcppExport SEXP _workHORSEmisc_identify_invitees(SEXP eligSEXP, SEXP prev_invSEXP, SEXP prbSEXP, SEXP freqSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type elig(eligSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prev_inv(prev_invSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prb(prbSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_invitees(elig, prev_inv, prb, freq, pid));
    return rcpp_result_gen;
END_RCPP
}
// hc_effect
IntegerVector hc_effect(const IntegerVector& x, const double& prb_of_continuation, const LogicalVector& pid);
RcppExport SEXP _workHORSEmisc_hc_effect(SEXP xSEXP, SEXP prb_of_continuationSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type prb_of_continuation(prb_of_continuationSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(hc_effect(x, prb_of_continuation, pid));
    return rcpp_result_gen;
END_RCPP
}
// fbound
NumericVector fbound(const NumericVector& x, NumericVector& a, NumericVector& b);
RcppExport SEXP _workHORSEmisc_fbound(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// dtsubset
SEXP dtsubset(SEXP x, SEXP rows, SEXP cols);
RcppExport SEXP _workHORSEmisc_dtsubset(SEXP xSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(dtsubset(x, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// QDiabetes
DataFrame QDiabetes(const DataFrame& df, int surv);
RcppExport SEXP _workHORSEmisc_QDiabetes(SEXP dfSEXP, SEXP survSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type surv(survSEXP);
    rcpp_result_gen = Rcpp::wrap(QDiabetes(df, surv));
    return rcpp_result_gen;
END_RCPP
}
// QDiabetes_vec_inputs
DataFrame QDiabetes_vec_inputs(const IntegerVector& age, const IntegerVector& sex, const IntegerVector& b_corticosteroids, const IntegerVector& b_treatedhyp, const NumericVector& bmi, const IntegerVector& ethrisk, const IntegerVector& fh_diab, const IntegerVector& smoke_cat, const NumericVector& town, int surv);
RcppExport SEXP _workHORSEmisc_QDiabetes_vec_inputs(SEXP ageSEXP, SEXP sexSEXP, SEXP b_corticosteroidsSEXP, SEXP b_treatedhypSEXP, SEXP bmiSEXP, SEXP ethriskSEXP, SEXP fh_diabSEXP, SEXP smoke_catSEXP, SEXP townSEXP, SEXP survSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type age(ageSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type b_corticosteroids(b_corticosteroidsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type b_treatedhyp(b_treatedhypSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bmi(bmiSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ethrisk(ethriskSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type fh_diab(fh_diabSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smoke_cat(smoke_catSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type town(townSEXP);
    Rcpp::traits::input_parameter< int >::type surv(survSEXP);
    rcpp_result_gen = Rcpp::wrap(QDiabetes_vec_inputs(age, sex, b_corticosteroids, b_treatedhyp, bmi, ethrisk, fh_diab, smoke_cat, town, surv));
    return rcpp_result_gen;
END_RCPP
}
// Qrisk2
List Qrisk2(const DataFrame& df, const bool& ignore_bmi, const bool& ignore_sbp, const bool& ignore_chol);
RcppExport SEXP _workHORSEmisc_Qrisk2(SEXP dfSEXP, SEXP ignore_bmiSEXP, SEXP ignore_sbpSEXP, SEXP ignore_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ignore_bmi(ignore_bmiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ignore_sbp(ignore_sbpSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ignore_chol(ignore_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(Qrisk2(df, ignore_bmi, ignore_sbp, ignore_chol));
    return rcpp_result_gen;
END_RCPP
}
// fscramble_trajectories
NumericVector fscramble_trajectories(NumericVector& x, const LogicalVector& pid, const double& jumpiness, const bool& inplace);
RcppExport SEXP _workHORSEmisc_fscramble_trajectories(SEXP xSEXP, SEXP pidSEXP, SEXP jumpinessSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpiness(jumpinessSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fscramble_trajectories(x, pid, jumpiness, inplace));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidNum
NumericVector shift_bypidNum(const NumericVector& x, const int& lag, const double& replace, const IntegerVector& id);
RcppExport SEXP _workHORSEmisc_shift_bypidNum(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const double& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidNum(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidInt
IntegerVector shift_bypidInt(const IntegerVector& x, const int& lag, const int& replace, const IntegerVector& id);
RcppExport SEXP _workHORSEmisc_shift_bypidInt(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const int& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidInt(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidBool
IntegerVector shift_bypidBool(const LogicalVector& x, const int& lag, const bool& replace, const IntegerVector& id);
RcppExport SEXP _workHORSEmisc_shift_bypidBool(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const bool& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidBool(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidStr
StringVector shift_bypidStr(const CharacterVector& x, const int& lag, const std::string& replace, const IntegerVector& id);
RcppExport SEXP _workHORSEmisc_shift_bypidStr(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidStr(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// simsmok
void simsmok(DataFrame& df, const NumericMatrix& pr_relapse_below_30, const NumericMatrix& pr_relapse_30_50, const NumericMatrix& pr_relapse_above_50, const int& relapse_cutoff, const NumericVector& relapse_effect, const int& age_min, const int& age_max);
RcppExport SEXP _workHORSEmisc_simsmok(SEXP dfSEXP, SEXP pr_relapse_below_30SEXP, SEXP pr_relapse_30_50SEXP, SEXP pr_relapse_above_50SEXP, SEXP relapse_cutoffSEXP, SEXP relapse_effectSEXP, SEXP age_minSEXP, SEXP age_maxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_below_30(pr_relapse_below_30SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_30_50(pr_relapse_30_50SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_above_50(pr_relapse_above_50SEXP);
    Rcpp::traits::input_parameter< const int& >::type relapse_cutoff(relapse_cutoffSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type relapse_effect(relapse_effectSEXP);
    Rcpp::traits::input_parameter< const int& >::type age_min(age_minSEXP);
    Rcpp::traits::input_parameter< const int& >::type age_max(age_maxSEXP);
    simsmok(df, pr_relapse_below_30, pr_relapse_30_50, pr_relapse_above_50, relapse_cutoff, relapse_effect, age_min, age_max);
    return R_NilValue;
END_RCPP
}
// simsmok_sc
void simsmok_sc(DataFrame& df, const NumericMatrix& pr_relapse_below_30, const NumericMatrix& pr_relapse_30_50, const NumericMatrix& pr_relapse_above_50, const int& relapse_cutoff, const IntegerVector& row_sel, const NumericVector& relapse_effect, const int& age_min, const int& age_max);
RcppExport SEXP _workHORSEmisc_simsmok_sc(SEXP dfSEXP, SEXP pr_relapse_below_30SEXP, SEXP pr_relapse_30_50SEXP, SEXP pr_relapse_above_50SEXP, SEXP relapse_cutoffSEXP, SEXP row_selSEXP, SEXP relapse_effectSEXP, SEXP age_minSEXP, SEXP age_maxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_below_30(pr_relapse_below_30SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_30_50(pr_relapse_30_50SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_above_50(pr_relapse_above_50SEXP);
    Rcpp::traits::input_parameter< const int& >::type relapse_cutoff(relapse_cutoffSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type row_sel(row_selSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type relapse_effect(relapse_effectSEXP);
    Rcpp::traits::input_parameter< const int& >::type age_min(age_minSEXP);
    Rcpp::traits::input_parameter< const int& >::type age_max(age_maxSEXP);
    simsmok_sc(df, pr_relapse_below_30, pr_relapse_30_50, pr_relapse_above_50, relapse_cutoff, row_sel, relapse_effect, age_min, age_max);
    return R_NilValue;
END_RCPP
}
// simsmok_postcalibration
void simsmok_postcalibration(DataFrame& df);
RcppExport SEXP _workHORSEmisc_simsmok_postcalibration(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df(dfSEXP);
    simsmok_postcalibration(df);
    return R_NilValue;
END_RCPP
}
// simsmok_cig
void simsmok_cig(DataFrame& df);
RcppExport SEXP _workHORSEmisc_simsmok_cig(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df(dfSEXP);
    simsmok_cig(df);
    return R_NilValue;
END_RCPP
}
// simsmok_cig_sc
void simsmok_cig_sc(DataFrame& df);
RcppExport SEXP _workHORSEmisc_simsmok_cig_sc(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df(dfSEXP);
    simsmok_cig_sc(df);
    return R_NilValue;
END_RCPP
}
// simsmok_cessation
List simsmok_cessation(const IntegerVector& smok_status, const IntegerVector& smok_quit_yrs, const IntegerVector& smok_dur, const IntegerVector& sex, const IntegerVector& qimd, const IntegerVector& age, const LogicalVector& new_pid, const IntegerVector& hc_eff, const NumericVector& relapse_rn, const NumericMatrix& pr_relapse_below_30, const NumericMatrix& pr_relapse_30_50, const NumericMatrix& pr_relapse_above_50, const int& relapse_cutoff, const NumericVector& relapse_effect, const int& age_min, const int& age_max);
RcppExport SEXP _workHORSEmisc_simsmok_cessation(SEXP smok_statusSEXP, SEXP smok_quit_yrsSEXP, SEXP smok_durSEXP, SEXP sexSEXP, SEXP qimdSEXP, SEXP ageSEXP, SEXP new_pidSEXP, SEXP hc_effSEXP, SEXP relapse_rnSEXP, SEXP pr_relapse_below_30SEXP, SEXP pr_relapse_30_50SEXP, SEXP pr_relapse_above_50SEXP, SEXP relapse_cutoffSEXP, SEXP relapse_effectSEXP, SEXP age_minSEXP, SEXP age_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_status(smok_statusSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_quit_yrs(smok_quit_yrsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_dur(smok_durSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type qimd(qimdSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type age(ageSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type new_pid(new_pidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type hc_eff(hc_effSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type relapse_rn(relapse_rnSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_below_30(pr_relapse_below_30SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_30_50(pr_relapse_30_50SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pr_relapse_above_50(pr_relapse_above_50SEXP);
    Rcpp::traits::input_parameter< const int& >::type relapse_cutoff(relapse_cutoffSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type relapse_effect(relapse_effectSEXP);
    Rcpp::traits::input_parameter< const int& >::type age_min(age_minSEXP);
    Rcpp::traits::input_parameter< const int& >::type age_max(age_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(simsmok_cessation(smok_status, smok_quit_yrs, smok_dur, sex, qimd, age, new_pid, hc_eff, relapse_rn, pr_relapse_below_30, pr_relapse_30_50, pr_relapse_above_50, relapse_cutoff, relapse_effect, age_min, age_max));
    return rcpp_result_gen;
END_RCPP
}
// simsmok_policy_impact_incr
List simsmok_policy_impact_incr(const IntegerVector& smok_status, const IntegerVector& smok_quit_yrs, const IntegerVector& smok_dur, const LogicalVector& new_pid, const IntegerVector& hc_eff);
RcppExport SEXP _workHORSEmisc_simsmok_policy_impact_incr(SEXP smok_statusSEXP, SEXP smok_quit_yrsSEXP, SEXP smok_durSEXP, SEXP new_pidSEXP, SEXP hc_effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_status(smok_statusSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_quit_yrs(smok_quit_yrsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_dur(smok_durSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type new_pid(new_pidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type hc_eff(hc_effSEXP);
    rcpp_result_gen = Rcpp::wrap(simsmok_policy_impact_incr(smok_status, smok_quit_yrs, smok_dur, new_pid, hc_eff));
    return rcpp_result_gen;
END_RCPP
}
// simsmok_policy_impact_decr
List simsmok_policy_impact_decr(const IntegerVector& smok_status, const IntegerVector& smok_quit_yrs, const IntegerVector& smok_dur, const IntegerVector& smok_cig, const LogicalVector& new_pid, const IntegerVector& hc_eff);
RcppExport SEXP _workHORSEmisc_simsmok_policy_impact_decr(SEXP smok_statusSEXP, SEXP smok_quit_yrsSEXP, SEXP smok_durSEXP, SEXP smok_cigSEXP, SEXP new_pidSEXP, SEXP hc_effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_status(smok_statusSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_quit_yrs(smok_quit_yrsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_dur(smok_durSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type smok_cig(smok_cigSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type new_pid(new_pidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type hc_eff(hc_effSEXP);
    rcpp_result_gen = Rcpp::wrap(simsmok_policy_impact_decr(smok_status, smok_quit_yrs, smok_dur, smok_cig, new_pid, hc_eff));
    return rcpp_result_gen;
END_RCPP
}
// wtd_ADstat
double wtd_ADstat(const NumericVector& a, const NumericVector& wa, const NumericVector& b, const NumericVector& wb);
RcppExport SEXP _workHORSEmisc_wtd_ADstat(SEXP aSEXP, SEXP waSEXP, SEXP bSEXP, SEXP wbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type wa(waSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type wb(wbSEXP);
    rcpp_result_gen = Rcpp::wrap(wtd_ADstat(a, wa, b, wb));
    return rcpp_result_gen;
END_RCPP
}
// wtd_KSstat
double wtd_KSstat(const NumericVector& a, const NumericVector& wa, const NumericVector& b, const NumericVector& wb);
RcppExport SEXP _workHORSEmisc_wtd_KSstat(SEXP aSEXP, SEXP waSEXP, SEXP bSEXP, SEXP wbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type wa(waSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type wb(wbSEXP);
    rcpp_result_gen = Rcpp::wrap(wtd_KSstat(a, wa, b, wb));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_workHORSEmisc_my_dBCPEo", (DL_FUNC) &_workHORSEmisc_my_dBCPEo, 7},
    {"_workHORSEmisc_my_pBCPEo", (DL_FUNC) &_workHORSEmisc_my_pBCPEo, 8},
    {"_workHORSEmisc_my_qBCPEo", (DL_FUNC) &_workHORSEmisc_my_qBCPEo, 8},
    {"_workHORSEmisc_my_dBCT", (DL_FUNC) &_workHORSEmisc_my_dBCT, 7},
    {"_workHORSEmisc_my_pBCT", (DL_FUNC) &_workHORSEmisc_my_pBCT, 8},
    {"_workHORSEmisc_my_qBCT", (DL_FUNC) &_workHORSEmisc_my_qBCT, 8},
    {"_workHORSEmisc_my_dBNB", (DL_FUNC) &_workHORSEmisc_my_dBNB, 6},
    {"_workHORSEmisc_my_pBNB", (DL_FUNC) &_workHORSEmisc_my_pBNB, 7},
    {"_workHORSEmisc_my_qBNB", (DL_FUNC) &_workHORSEmisc_my_qBNB, 7},
    {"_workHORSEmisc_my_qZIBNB", (DL_FUNC) &_workHORSEmisc_my_qZIBNB, 8},
    {"_workHORSEmisc_my_qZABNB", (DL_FUNC) &_workHORSEmisc_my_qZABNB, 8},
    {"_workHORSEmisc_my_dDEL", (DL_FUNC) &_workHORSEmisc_my_dDEL, 6},
    {"_workHORSEmisc_my_pDEL", (DL_FUNC) &_workHORSEmisc_my_pDEL, 7},
    {"_workHORSEmisc_my_qDEL", (DL_FUNC) &_workHORSEmisc_my_qDEL, 7},
    {"_workHORSEmisc_my_get_C", (DL_FUNC) &_workHORSEmisc_my_get_C, 3},
    {"_workHORSEmisc_my_dDPO", (DL_FUNC) &_workHORSEmisc_my_dDPO, 5},
    {"_workHORSEmisc_my_pDPO", (DL_FUNC) &_workHORSEmisc_my_pDPO, 5},
    {"_workHORSEmisc_my_qDPO", (DL_FUNC) &_workHORSEmisc_my_qDPO, 7},
    {"_workHORSEmisc_run_impactncd_simulation", (DL_FUNC) &_workHORSEmisc_run_impactncd_simulation, 3},
    {"_workHORSEmisc_my_qMN4", (DL_FUNC) &_workHORSEmisc_my_qMN4, 7},
    {"_workHORSEmisc_my_dSICHEL", (DL_FUNC) &_workHORSEmisc_my_dSICHEL, 6},
    {"_workHORSEmisc_my_pSICHEL", (DL_FUNC) &_workHORSEmisc_my_pSICHEL, 7},
    {"_workHORSEmisc_my_qSICHEL", (DL_FUNC) &_workHORSEmisc_my_qSICHEL, 7},
    {"_workHORSEmisc_my_qZISICHEL", (DL_FUNC) &_workHORSEmisc_my_qZISICHEL, 8},
    {"_workHORSEmisc_my_pZISICHEL", (DL_FUNC) &_workHORSEmisc_my_pZISICHEL, 8},
    {"_workHORSEmisc_carry_forward", (DL_FUNC) &_workHORSEmisc_carry_forward, 3},
    {"_workHORSEmisc_carry_backward", (DL_FUNC) &_workHORSEmisc_carry_backward, 2},
    {"_workHORSEmisc_mk_new_simulant_markers", (DL_FUNC) &_workHORSEmisc_mk_new_simulant_markers, 1},
    {"_workHORSEmisc_identify_longdead", (DL_FUNC) &_workHORSEmisc_identify_longdead, 2},
    {"_workHORSEmisc_identify_invitees", (DL_FUNC) &_workHORSEmisc_identify_invitees, 5},
    {"_workHORSEmisc_hc_effect", (DL_FUNC) &_workHORSEmisc_hc_effect, 3},
    {"_workHORSEmisc_fbound", (DL_FUNC) &_workHORSEmisc_fbound, 3},
    {"_workHORSEmisc_dtsubset", (DL_FUNC) &_workHORSEmisc_dtsubset, 3},
    {"_workHORSEmisc_QDiabetes", (DL_FUNC) &_workHORSEmisc_QDiabetes, 2},
    {"_workHORSEmisc_QDiabetes_vec_inputs", (DL_FUNC) &_workHORSEmisc_QDiabetes_vec_inputs, 10},
    {"_workHORSEmisc_Qrisk2", (DL_FUNC) &_workHORSEmisc_Qrisk2, 4},
    {"_workHORSEmisc_fscramble_trajectories", (DL_FUNC) &_workHORSEmisc_fscramble_trajectories, 4},
    {"_workHORSEmisc_shift_bypidNum", (DL_FUNC) &_workHORSEmisc_shift_bypidNum, 4},
    {"_workHORSEmisc_shift_bypidInt", (DL_FUNC) &_workHORSEmisc_shift_bypidInt, 4},
    {"_workHORSEmisc_shift_bypidBool", (DL_FUNC) &_workHORSEmisc_shift_bypidBool, 4},
    {"_workHORSEmisc_shift_bypidStr", (DL_FUNC) &_workHORSEmisc_shift_bypidStr, 4},
    {"_workHORSEmisc_simsmok", (DL_FUNC) &_workHORSEmisc_simsmok, 8},
    {"_workHORSEmisc_simsmok_sc", (DL_FUNC) &_workHORSEmisc_simsmok_sc, 9},
    {"_workHORSEmisc_simsmok_postcalibration", (DL_FUNC) &_workHORSEmisc_simsmok_postcalibration, 1},
    {"_workHORSEmisc_simsmok_cig", (DL_FUNC) &_workHORSEmisc_simsmok_cig, 1},
    {"_workHORSEmisc_simsmok_cig_sc", (DL_FUNC) &_workHORSEmisc_simsmok_cig_sc, 1},
    {"_workHORSEmisc_simsmok_cessation", (DL_FUNC) &_workHORSEmisc_simsmok_cessation, 16},
    {"_workHORSEmisc_simsmok_policy_impact_incr", (DL_FUNC) &_workHORSEmisc_simsmok_policy_impact_incr, 5},
    {"_workHORSEmisc_simsmok_policy_impact_decr", (DL_FUNC) &_workHORSEmisc_simsmok_policy_impact_decr, 6},
    {"_workHORSEmisc_wtd_ADstat", (DL_FUNC) &_workHORSEmisc_wtd_ADstat, 4},
    {"_workHORSEmisc_wtd_KSstat", (DL_FUNC) &_workHORSEmisc_wtd_KSstat, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_workHORSEmisc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
